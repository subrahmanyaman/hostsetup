/*
 * Copyright (c) 2019, The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

#include <vector>

#include <keymaster/cppcose/cppcose.h>

namespace keymaster::javacard::test {

using bytevec = std::vector<uint8_t>;
using namespace cppcose;

extern bytevec kTestMacKey;

// The Google root key for the Endpoint Encryption Key chain, encoded as COSE_Sign1
inline constexpr uint8_t kCoseEncodedRootCert[] = {
        0x84, 0x43, 0xa1, 0x01, 0x27, 0xa0, 0x58, 0x2a, 0xa4, 0x01, 0x01, 0x03, 0x27, 0x20, 0x06,
        0x21, 0x58, 0x20, 0x99, 0xb9, 0xee, 0xdd, 0x5e, 0xe4, 0x52, 0xf6, 0x85, 0xc6, 0x4c, 0x62,
        0xdc, 0x3e, 0x61, 0xab, 0x57, 0x48, 0x7d, 0x75, 0x37, 0x29, 0xad, 0x76, 0x80, 0x32, 0xd2,
        0xb3, 0xcb, 0x63, 0x58, 0xd9, 0x58, 0x40, 0x1e, 0x22, 0x08, 0x4b, 0xa4, 0xb7, 0xa4, 0xc8,
        0xd7, 0x4e, 0x03, 0x0e, 0xfe, 0xb8, 0xaf, 0x14, 0x4c, 0xa7, 0x3b, 0x6f, 0xa5, 0xcd, 0xdc,
        0xda, 0x79, 0xc6, 0x2b, 0x64, 0xfe, 0x99, 0x39, 0xaf, 0x76, 0xe7, 0x80, 0xfa, 0x66, 0x00,
        0x85, 0x0d, 0x07, 0x98, 0x2a, 0xac, 0x91, 0x5c, 0xa7, 0x25, 0x14, 0x49, 0x06, 0x34, 0x75,
        0xca, 0x8a, 0x27, 0x7a, 0xd9, 0xe3, 0x5a, 0x49, 0xeb, 0x02, 0x03};

// The Google Endpoint Encryption Key certificate, encoded as COSE_Sign1
inline constexpr uint8_t kCoseEncodedGeekCert[] = {
        0x84, 0x43, 0xa1, 0x01, 0x27, 0xa0, 0x58, 0x4e, 0xa5, 0x01, 0x01, 0x02, 0x58, 0x20,
        0xd0, 0xae, 0xc1, 0x15, 0xca, 0x2a, 0xcf, 0x73, 0xae, 0x6b, 0xcc, 0xcb, 0xd1, 0x96,
        0x1d, 0x65, 0xe8, 0xb1, 0xdd, 0xd7, 0x4a, 0x1a, 0x37, 0xb9, 0x43, 0x3a, 0x97, 0xd5,
        0x99, 0xdf, 0x98, 0x08, 0x03, 0x38, 0x18, 0x20, 0x04, 0x21, 0x58, 0x20, 0xbe, 0x85,
        0xe7, 0x46, 0xc4, 0xa3, 0x42, 0x5a, 0x40, 0xd9, 0x36, 0x3a, 0xa6, 0x15, 0xd0, 0x2c,
        0x58, 0x7e, 0x3d, 0xdc, 0x33, 0x02, 0x32, 0xd2, 0xfc, 0x5e, 0x1e, 0x87, 0x25, 0x5f,
        0x72, 0x60, 0x58, 0x40, 0x9b, 0xcf, 0x90, 0xe2, 0x2e, 0x4b, 0xab, 0xd1, 0x18, 0xb1,
        0x0e, 0x8e, 0x5d, 0x20, 0x27, 0x4b, 0x84, 0x58, 0xfe, 0xfc, 0x32, 0x90, 0x7e, 0x72,
        0x05, 0x83, 0xbc, 0xd7, 0x82, 0xbe, 0xfa, 0x64, 0x78, 0x2d, 0x54, 0x10, 0x4b, 0xc0,
        0x31, 0xbf, 0x6b, 0xe8, 0x1e, 0x35, 0xe2, 0xf0, 0x2d, 0xce, 0x6c, 0x2f, 0x4f, 0xf2,
        0xf5, 0x4f, 0xa5, 0xd4, 0x83, 0xad, 0x96, 0xa2, 0xf1, 0x87, 0x58, 0x04};

inline constexpr uint8_t kCoseEncodedEcdsaRootCert[] = {
        0x84, 0x43, 0xa1, 0x01, 0x26, 0xa0, 0x58, 0x4d, 0xa5, 0x01, 0x02, 0x03, 0x26, 0x20,
        0x01, 0x21, 0x58, 0x20, 0xaf, 0x72, 0xd9, 0xa5, 0x5b, 0xcd, 0x82, 0x94, 0x08, 0xc1,
        0x1e, 0xfd, 0x99, 0xec, 0xc3, 0x65, 0x5c, 0x65, 0xf2, 0x59, 0xd6, 0xe4, 0x9c, 0xe9,
        0x4a, 0xad, 0x0c, 0x64, 0x23, 0x7c, 0x0f, 0xfe, 0x22, 0x58, 0x20, 0x07, 0xb2, 0x5c,
        0xae, 0x70, 0x57, 0x2f, 0x43, 0xf3, 0x1d, 0xa8, 0x44, 0x78, 0x10, 0xa7, 0x88, 0xbf,
        0xd2, 0x81, 0x1a, 0xe6, 0x95, 0x4f, 0x97, 0x24, 0x22, 0x40, 0x74, 0xb0, 0x00, 0xf7,
        0x69, 0x58, 0x47, 0x30, 0x45, 0x02, 0x20, 0x42, 0x0e, 0x70, 0x1a, 0x23, 0x19, 0xcb,
        0x18, 0x87, 0x45, 0x04, 0xb6, 0x2e, 0xe9, 0x10, 0x74, 0xb7, 0x4a, 0x0c, 0x9c, 0x40,
        0x7c, 0xa9, 0x31, 0xa9, 0xbc, 0x4e, 0x9e, 0x4d, 0x41, 0x5e, 0x6c, 0x02, 0x21, 0x00,
        0x90, 0x9c, 0x6a, 0x46, 0xd8, 0x9a, 0xe9, 0x52, 0xa0, 0xcd, 0x5f, 0x52, 0x2b, 0x8f,
        0xc1, 0x04, 0xc6, 0x7d, 0xa1, 0x67, 0xb1, 0x8d, 0xc5, 0xec, 0xdb, 0x75, 0x05, 0x8c,
        0x6e, 0x13, 0xc0, 0x8a };

inline constexpr uint8_t kCoseEncodedEcdsaGeekCert[] = {
        0x84, 0x43, 0xa1, 0x01, 0x26, 0xa0, 0x58, 0x55, 0xa6, 0x01, 0x02, 0x02, 0x45, 0x65,
        0x65, 0x6b, 0x69, 0x64, 0x03, 0x38, 0x18, 0x20, 0x01, 0x21, 0x58, 0x20, 0x4b, 0x20,
        0x12, 0x99, 0x5f, 0x3b, 0x60, 0x96, 0x2c, 0x7c, 0x8f, 0x84, 0xe0, 0xe4, 0x62, 0xfd,
        0xf3, 0xb8, 0xcf, 0xd7, 0xaf, 0xad, 0x51, 0x98, 0xdd, 0x41, 0xc1, 0xad, 0x4c, 0x4c,
        0x8f, 0xe0, 0x22, 0x58, 0x20, 0xed, 0xba, 0xe2, 0xc9, 0x86, 0x1f, 0x7a, 0x94, 0x0d,
        0x4d, 0xe9, 0x25, 0x34, 0xbc, 0x24, 0x6e, 0xc6, 0x84, 0x21, 0xb2, 0xaf, 0xa8, 0x4f,
        0xeb, 0xfa, 0xc0, 0xf5, 0x0a, 0x09, 0xae, 0xff, 0x41, 0x58, 0x47, 0x30, 0x45, 0x02,
        0x21, 0x00, 0x87, 0xf1, 0x81, 0x1b, 0x31, 0xab, 0x09, 0xf9, 0x9c, 0x33, 0x90, 0xd9, 
        0xff, 0x77, 0x3e, 0x0d, 0xda, 0xab, 0xa6, 0xe1, 0x97, 0x8d, 0xae, 0xd1, 0x3f, 0xf8, 
        0x7e, 0xea, 0xef, 0xe9, 0xb3, 0xe7, 0x02, 0x20, 0x43, 0x4f, 0x34, 0x48, 0x25, 0x30, 
        0x39, 0x94, 0xc5, 0x7f, 0xf6, 0x0a, 0xfc, 0x3c, 0x91, 0x13, 0x21, 0x78, 0x84, 0xeb, 
        0x0e, 0x5a, 0xee, 0x5b, 0xb9, 0x1a, 0x20, 0x12, 0xec, 0xde, 0x96, 0x4d};


/**
 * Generates random bytes.
 */
bytevec randomBytes(size_t numBytes);

struct EekChain {
    bytevec chain;
    bytevec last_pubkey;
    bytevec last_privkey;
};

/**
 * Generates an X25518 EEK with the specified eekId and an Ed25519 chain of the
 * specified length. All keys are generated randomly.
 */
ErrMsgOr<EekChain> generateEekChain(int32_t supportedEekCurve, size_t length, const bytevec& eekId);

/**
 * Returns the CBOR-encoded, production Google Endpoint Encryption Key chain.
 */
bytevec getProdEekChain(int32_t supportedEekCurve);

struct BccEntryData {
    bytevec pubKey;
};

/**
 * Validates the provided CBOR-encoded BCC, returning a vector of BccEntryData
 * structs containing the BCC entry contents.  If an entry contains no firmware
 * digest, the corresponding BccEntryData.firmwareDigest will have length zero
 * (there's no way to distinguish between an empty and missing firmware digest,
 * which seems fine).
 */
ErrMsgOr<std::vector<BccEntryData>> validateBcc(const cppbor::Array* bcc);

struct JsonOutput {
    static JsonOutput Ok(std::string json) { return {std::move(json), ""}; }
    static JsonOutput Error(std::string error) { return {"", std::move(error)}; }

    std::string output;
    std::string error;  // if non-empty, this describes what went wrong
};

/**
 * Take a given certificate request and output a JSON blob containing both the
 * build fingerprint and certificate request. This data may be serialized, then
 * later uploaded to the remote provisioning service. The input csr is not
 * validated, only encoded.
 *
 * Output format:
 *   {
 *     "build_fingerprint": <string>
 *     "csr": <base64 CBOR CSR>
 *   }
 */
JsonOutput jsonEncodeCsrWithBuild(const cppbor::Array& csr);

}  // namespace aidl::android::hardware::security::keymint::remote_prov
